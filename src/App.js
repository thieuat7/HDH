import { useState } from 'react';
import './App.css';
import ProcessForm from './components/ProcessForm';
import ProcessList from './components/ProcessList';
import Results from './components/Results';

import { fcfs } from './algorithms/fcfs';
import { sjf } from './algorithms/sjf';
import { srtf } from './algorithms/srtf';
import { rr } from './algorithms/rr';

function App() {
  const [processes, setProcesses] = useState([]);
  const [result, setResult] = useState([]);
  const [algorithm, setAlgorithm] = useState('fcfs');
  const [quantum, setQuantum] = useState(0);

  // H√†m th√™m ti·∫øn tr√¨nh v√†o danh s√°ch
  const addProcess = (newProcess) => {
    setProcesses((prev) => [...prev, newProcess]);
  };

  // H√†m x√≥a ti·∫øn tr√¨nh kh·ªèi danh s√°ch
  const onDeleteProcess = (pid) => {
    setProcesses((prevProcesses) => prevProcesses.filter((p) => p.pid !== pid));
  };

  // Ch·∫°y m√¥ ph·ªèng
  const runSimulation = () => {
    if (processes.length === 0) {
      alert("Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt ti·∫øn tr√¨nh.");
      return;
    }

    let res = [];
    switch (algorithm) {
      case 'fcfs':
        res = fcfs(processes);
        break;
      case 'sjf':
        res = sjf(processes);
        break;
      case 'srtf':
        res = srtf(processes);
        break;
      case 'rr':
        res = rr(processes, quantum);
        break;
      default:
        alert("Thu·∫≠t to√°n kh√¥ng h·ª£p l·ªá.");
        return;
    }
    setResult(res);
  };

  return (
    <div style={{ padding: '20px' }}>
      <h2>CPU Scheduling Simulator
        <button onClick={() => window.location.reload()} style={{ marginLeft: '10px' }}>
          üîÑ
        </button>
      </h2>

      <select value={algorithm} onChange={e => setAlgorithm(e.target.value)}>
        <option value="fcfs">FCFS</option>
        <option value="sjf">SJF</option>
        <option value="srtf">SRTF</option>
        <option value="rr">RR</option>
      </select>

      <ProcessForm algorithm={algorithm} addProcess={addProcess} setQuantum={setQuantum} />
      <button onClick={runSimulation}>‚ñ∂Ô∏è Ch·∫°y m√¥ ph·ªèng</button>

      {/* Truy·ªÅn h√†m onDeleteProcess v√†o ProcessList */}
      <ProcessList processes={processes} onDeleteProcess={onDeleteProcess} />
      <Results result={result} />
    </div>
  );
}

export default App;
